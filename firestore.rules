rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read and update their own profile document
    match /users/{userId} {
      allow read, update: if isSignedIn() && userId == request.auth.uid;
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow delete: if false;

      // Referral codes mapping (users/referralCodes/{code})
      match /referralCodes/{code} {
        // Read publicly to validate codes client-side; restrict writes to signed-in
        allow read: if true;
        allow create, update: if isSignedIn();
        allow delete: if false;
      }
    }

    // Orders: owner can read/write own; admins can read/write all
    function isAdmin() {
      return request.auth.token.email == 'ultron.inov@gmail.com';
    }

    match /orders/{orderId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Promos: public read; only admins can write
    match /promos/{promoId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Payments: owner can create/read if the linked order belongs to them
    match /payments/{paymentId} {
      function orderFor(payment) {
        return get(/databases/$(database)/documents/orders/$(payment.orderId)).data;
      }
      allow create: if isSignedIn() && orderFor(request.resource.data).userId == request.auth.uid || isAdmin();
      allow read: if (isSignedIn() && orderFor(resource.data).userId == request.auth.uid) || isAdmin();
      allow update: if isAdmin();
      allow delete: if false;
    }

    // Products: admins can manage; public read
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Site settings: public read (for homepage), only admins can write
    match /settings/{settingId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
